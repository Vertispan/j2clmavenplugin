<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>\${groupId}</groupId>
        <artifactId>\${rootArtifactId}</artifactId>
        <version>\${version}</version>
    </parent>

    <artifactId>\${artifactId}</artifactId>
    <packaging>war</packaging>

    <dependencies>
        <!-- Note that the client module isn't listed here, see the prod profile at the end -->
        <dependency>
            <groupId>\${project.groupId}</groupId>
            <artifactId>\${rootArtifactId}-shared</artifactId>
            <version>\${project.version}</version>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <configuration>
                        <scanIntervalSeconds>1</scanIntervalSeconds>
                        <webApp>
                            <extraClasspath>\${project.basedir}/../${rootArtifactId}-shared/target/classes/</extraClasspath>
                        </webApp>
                        <contextXml>\${project.basedir}/src/main/jettyconf/context.xml</contextXml>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>env-prod</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <!--
            A default build will produce production JS and will generate a server war which
            includes that JS - in order to let the non-production build skip depending on
            that JS, we only include the client dependency in this production profile.
            -->
            <dependencies>
                <dependency>
                    <groupId>\${project.groupId}</groupId>
                    <artifactId>${rootArtifactId}-client</artifactId>
                    <version>\${project.version}</version>
                    <type>war</type>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>env-dev</id>
            <activation>
                <property>
                    <name>env</name>
                    <value>dev</value>
                </property>
            </activation>
            <!--
            In contrast to the production profile, this development profile doesn't depend
            on the client project, but assumes that the client JS is being generated by
            j2cl:watch.
            If the project doesn't use jetty, or doesnt use maven to run jetty, make sure
            to serve
            -->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jetty</groupId>
                        <artifactId>jetty-maven-plugin</artifactId>
                        <configuration>
                            <webApp>
                                <resourceBases>
                                    <!-- Serve static content without copying from src/main/webapp -->
                                    <resourceBase>\${project.basedir}/src/main/webapp</resourceBase>
                                    <!-- Serve compiled JS built by j2cl:watch from the parent project -->
                                    <resourceBase>\${project.basedir}/../target/j2cl-watch</resourceBase>
                                </resourceBases>
                            </webApp>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
