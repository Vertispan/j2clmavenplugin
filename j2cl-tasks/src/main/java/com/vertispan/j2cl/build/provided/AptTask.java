package com.vertispan.j2cl.build.provided;

import com.google.auto.service.AutoService;
import com.vertispan.j2cl.build.task.*;

import java.nio.file.Files;
import java.nio.file.PathMatcher;

@AutoService(TaskFactory.class)
public class AptTask extends TaskFactory {
    public static final PathMatcher BYTECODE = withSuffix(".class");
    public static final PathMatcher NOT_BYTECODE = p -> !BYTECODE.matches(p);

    @Override
    public String getOutputType() {
        return OutputTypes.GENERATED_SOURCES;
    }

    @Override
    public String getTaskName() {
        return "default";
    }

    @Override
    public String getVersion() {
        return "0";
    }

    @Override
    public Task resolve(Project project, Config config) {
        // Considering removing this so that we can consistently copy from generated sources to get resources
//        if (!project.hasSourcesMapped()) {
//            // we explicitly don't copy the generated sources, they already exist in the proj sources
//            return ignored -> {};
//        }

        // we assume that bytecode was generated by javac, and will read the generated sources out of there
        Input myBytecode = input(project, OutputTypes.BYTECODE).filter(NOT_BYTECODE);

        return context -> {
            // the BytecodeTask already did the work for us, just copy sources to output
            for (CachedPath entry : myBytecode.getFilesAndHashes()) {
                Files.createDirectories(context.outputPath().resolve(entry.getSourcePath()).getParent());
                Files.copy(entry.getAbsolutePath(), context.outputPath().resolve(entry.getSourcePath()));
            }
        };
    }
}
